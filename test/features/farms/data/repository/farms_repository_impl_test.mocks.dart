// Mocks generated by Mockito 5.4.2 from annotations
// in pontaagro/test/features/farms/data/repository/farms_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pontaagro/core/data/database/db_helper.dart' as _i2;
import 'package:pontaagro/features/farms/data/models/farms_model.dart' as _i5;
import 'package:pontaagro/features/farms/data/repository/farms_repository_impl.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDbHelper_0 extends _i1.SmartFake implements _i2.DbHelper {
  _FakeDbHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FarmsRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFarmsRepositoryImpl extends _i1.Mock
    implements _i3.FarmsRepositoryImpl {
  MockFarmsRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DbHelper get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDbHelper_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DbHelper);
  @override
  _i4.Future<int> createFarm(_i5.FarmsModel? farm) => (super.noSuchMethod(
        Invocation.method(
          #createFarm,
          [farm],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteFarm(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFarm,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<List<_i5.FarmsModel>> getFarms() => (super.noSuchMethod(
        Invocation.method(
          #getFarms,
          [],
        ),
        returnValue: _i4.Future<List<_i5.FarmsModel>>.value(<_i5.FarmsModel>[]),
      ) as _i4.Future<List<_i5.FarmsModel>>);
  @override
  _i4.Future<int> updateFarm(_i5.FarmsModel? farm) => (super.noSuchMethod(
        Invocation.method(
          #updateFarm,
          [farm],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
